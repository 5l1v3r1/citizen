#!/usr/bin/env node
const request = require('request');
const { join } = require('path');
const fs = require('fs');
const { promisify } = require('util');
const unzipper = require('unzipper');
const debug = require('debug')('test:integration');

const chmod = promisify(fs.chmod);
const mkdir = promisify(fs.mkdir);
const access = promisify(fs.access);

const TERRAFORM_VERSION = '0.11.8';
const PLATFORM = process.platform;
const DOWNLOAD_URL = `https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_${PLATFORM}_amd64.zip`;

const TARGET_DIR = join(__dirname, 'temp');

const download = async() => {
  try {
    await mkdir(TARGET_DIR);
  } catch(ignore) { }

  debug(`Start to download terraform v${TERRAFORM_VERSION}`);

  const terraformFile = join(TARGET_DIR, 'terraform');
  let notExist = true;
  try {
    notExist = await access(terraformFile)
  } catch(ignore) { }

  return new Promise((resolve, reject) => {
    if (notExist) {
      request(DOWNLOAD_URL)
        .pipe(unzipper.Parse())
        .on('entry', (entry) => {
          debug('download completed');

          const fileName = entry.path;
          if (fileName === 'terraform') {
            debug('Write it as a file');
            entry.on('finish', async () => {
              await chmod(`${TARGET_DIR}/${fileName}`, 0o765);
              debug('All done.');
              resolve();
            });
            entry.pipe(fs.createWriteStream(`${TARGET_DIR}/${fileName}`));
          } else {
            entry.autodrain();
            reject(new Error('hahaha'));
          }
        });
    }

    debug('skip to download terraform');
    resolve();
  });
};

download();
